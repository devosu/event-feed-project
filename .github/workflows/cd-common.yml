# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the 'main' branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: GCP CD Common

on:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      actual_deploy:
        required: true
        type: boolean

# Note, use environment instead of hard-coded env variables.
jobs:
  build-only:
    # Add 'id-token' with the intended permissions for workload identity federation
    environment: Gcloud Deploy Env
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authentication via credentials json
      - name: Google Auth
        id: gcloud-auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCLOUD_DEPLOY_SA_KEY }}

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          username: _json_key
          password: ${{ secrets.GCLOUD_DEPLOY_SA_KEY }}
          registry: '${{ vars.ART_REG_REGION }}-docker.pkg.dev'

      - name: Build Container
        id: docker-build
        run: |
          docker build -t '${{ vars.ART_REG_REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.ART_REG_NAME }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}' ./

  push-and-deploy:
    needs: build-only
    if: ${{ needs.build-only.result == 'success' && inputs.actual_deploy == true }}
    environment: Gcloud Deploy Env
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Push Container to Artifact Registry
        id: docker-push
        run: |
          docker push '${{ vars.ART_REG_REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.ART_REG_NAME }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.CRUN_SERVICE_NAME }}
          region: ${{ vars.CRUN_SERVICE_REGION }}
          image: '${{ vars.ART_REG_REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.ART_REG_NAME }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}'
          # Pass the GitHub repo secrets as environment variables to the Cloud Run service
          env_vars: |
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
            FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
            FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
            FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
            FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}

      # Report the Cloud Run url output.
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
